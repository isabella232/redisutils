// This file was generated by counterfeiter
// counterfeiter -o iredis/redis_fake.go --fake-name RedisFake iredis/redis.go Redis

package iredis

import (
	"sync"

	redis_v5 "gopkg.in/redis.v5"
)

//RedisFake ...
type RedisFake struct {
	NewClientStub        func(*redis_v5.Options) Client
	newClientMutex       sync.RWMutex
	newClientArgsForCall []struct {
		arg1 *redis_v5.Options
	}
	newClientReturns struct {
		result1 Client
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

//NewClient ...
func (fake *RedisFake) NewClient(arg1 *redis_v5.Options) Client {
	fake.newClientMutex.Lock()
	fake.newClientArgsForCall = append(fake.newClientArgsForCall, struct {
		arg1 *redis_v5.Options
	}{arg1})
	fake.recordInvocation("NewClient", []interface{}{arg1})
	fake.newClientMutex.Unlock()
	if fake.NewClientStub != nil {
		return fake.NewClientStub(arg1)
	}
	return fake.newClientReturns.result1
}

//NewClientCallCount ...
func (fake *RedisFake) NewClientCallCount() int {
	fake.newClientMutex.RLock()
	defer fake.newClientMutex.RUnlock()
	return len(fake.newClientArgsForCall)
}

//NewClientArgsForCall ...
func (fake *RedisFake) NewClientArgsForCall(i int) *redis_v5.Options {
	fake.newClientMutex.RLock()
	defer fake.newClientMutex.RUnlock()
	return fake.newClientArgsForCall[i].arg1
}

//NewClientReturns ...
func (fake *RedisFake) NewClientReturns(result1 Client) {
	fake.NewClientStub = nil
	fake.newClientReturns = struct {
		result1 Client
	}{result1}
}

//Invocations ...
func (fake *RedisFake) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.newClientMutex.RLock()
	defer fake.newClientMutex.RUnlock()
	return fake.invocations
}

func (fake *RedisFake) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ Redis = new(RedisFake)
