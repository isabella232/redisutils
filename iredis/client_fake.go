// This file was generated by counterfeiter
// counterfeiter -o iredis/client_fake.go --fake-name ClientFake iredis/client.go IClient

package iredis

import "sync"

//ClientFake ...
type ClientFake struct {
	CloseStub        func() error
	closeMutex       sync.RWMutex
	closeArgsForCall []struct{}
	closeReturns     struct {
		result1 error
	}
	PingStub        func() IStatusCmd
	pingMutex       sync.RWMutex
	pingArgsForCall []struct{}
	pingReturns     struct {
		result1 IStatusCmd
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

//Close ...
func (fake *ClientFake) Close() error {
	fake.closeMutex.Lock()
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct{}{})
	fake.recordInvocation("Close", []interface{}{})
	fake.closeMutex.Unlock()
	if fake.CloseStub != nil {
		return fake.CloseStub()
	}
	return fake.closeReturns.result1
}

//CloseCallCount ...
func (fake *ClientFake) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

//CloseReturns ...
func (fake *ClientFake) CloseReturns(result1 error) {
	fake.CloseStub = nil
	fake.closeReturns = struct {
		result1 error
	}{result1}
}

//Ping ...
func (fake *ClientFake) Ping() IStatusCmd {
	fake.pingMutex.Lock()
	fake.pingArgsForCall = append(fake.pingArgsForCall, struct{}{})
	fake.recordInvocation("Ping", []interface{}{})
	fake.pingMutex.Unlock()
	if fake.PingStub != nil {
		return fake.PingStub()
	}
	return fake.pingReturns.result1
}

//PingCallCount ...
func (fake *ClientFake) PingCallCount() int {
	fake.pingMutex.RLock()
	defer fake.pingMutex.RUnlock()
	return len(fake.pingArgsForCall)
}

//PingReturns ...
func (fake *ClientFake) PingReturns(result1 IStatusCmd) {
	fake.PingStub = nil
	fake.pingReturns = struct {
		result1 IStatusCmd
	}{result1}
}

//Invocations ...
func (fake *ClientFake) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	fake.pingMutex.RLock()
	defer fake.pingMutex.RUnlock()
	return fake.invocations
}

func (fake *ClientFake) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ IClient = new(ClientFake)
