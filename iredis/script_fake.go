// This file was generated by counterfeiter
// counterfeiter -o iredis/script_fake.go --fake-name ScriptFake iredis/client.go Script

package iredis

import (
	"sync"

	redis "gopkg.in/redis.v5"
)

//ScriptFake ...
type ScriptFake struct {
	EvalStub        func(Scripter, []string, ...interface{}) *redis.Cmd
	evalMutex       sync.RWMutex
	evalArgsForCall []struct {
		arg1 Scripter
		arg2 []string
		arg3 []interface{}
	}
	evalReturns struct {
		result1 *redis.Cmd
	}
	EvalShaStub        func(Scripter, []string, ...interface{}) *redis.Cmd
	evalShaMutex       sync.RWMutex
	evalShaArgsForCall []struct {
		arg1 Scripter
		arg2 []string
		arg3 []interface{}
	}
	evalShaReturns struct {
		result1 *redis.Cmd
	}
	ExistsStub        func(Scripter) BoolSliceCmd
	existsMutex       sync.RWMutex
	existsArgsForCall []struct {
		arg1 Scripter
	}
	existsReturns struct {
		result1 BoolSliceCmd
	}
	LoadStub        func(Scripter) StringCmd
	loadMutex       sync.RWMutex
	loadArgsForCall []struct {
		arg1 Scripter
	}
	loadReturns struct {
		result1 StringCmd
	}
	RunStub        func(Scripter, []string, ...interface{}) *redis.Cmd
	runMutex       sync.RWMutex
	runArgsForCall []struct {
		arg1 Scripter
		arg2 []string
		arg3 []interface{}
	}
	runReturns struct {
		result1 *redis.Cmd
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

//Eval ...
func (fake *ScriptFake) Eval(arg1 Scripter, arg2 []string, arg3 ...interface{}) *redis.Cmd {
	var arg2Copy []string
	if arg2 != nil {
		arg2Copy = make([]string, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.evalMutex.Lock()
	fake.evalArgsForCall = append(fake.evalArgsForCall, struct {
		arg1 Scripter
		arg2 []string
		arg3 []interface{}
	}{arg1, arg2Copy, arg3})
	fake.recordInvocation("Eval", []interface{}{arg1, arg2Copy, arg3})
	fake.evalMutex.Unlock()
	if fake.EvalStub != nil {
		return fake.EvalStub(arg1, arg2, arg3...)
	}
	return fake.evalReturns.result1
}

//NewScriptFake is the preferred way to initialise a ScriptFake
func NewScriptFake() *ScriptFake {
	return new(ScriptFake)
}

//EvalCallCount ...
func (fake *ScriptFake) EvalCallCount() int {
	fake.evalMutex.RLock()
	defer fake.evalMutex.RUnlock()
	return len(fake.evalArgsForCall)
}

//EvalArgsForCall ...
func (fake *ScriptFake) EvalArgsForCall(i int) (Scripter, []string, []interface{}) {
	fake.evalMutex.RLock()
	defer fake.evalMutex.RUnlock()
	return fake.evalArgsForCall[i].arg1, fake.evalArgsForCall[i].arg2, fake.evalArgsForCall[i].arg3
}

//EvalReturns ...
func (fake *ScriptFake) EvalReturns(result1 *redis.Cmd) {
	fake.EvalStub = nil
	fake.evalReturns = struct {
		result1 *redis.Cmd
	}{result1}
}

//EvalSha ...
func (fake *ScriptFake) EvalSha(arg1 Scripter, arg2 []string, arg3 ...interface{}) *redis.Cmd {
	var arg2Copy []string
	if arg2 != nil {
		arg2Copy = make([]string, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.evalShaMutex.Lock()
	fake.evalShaArgsForCall = append(fake.evalShaArgsForCall, struct {
		arg1 Scripter
		arg2 []string
		arg3 []interface{}
	}{arg1, arg2Copy, arg3})
	fake.recordInvocation("EvalSha", []interface{}{arg1, arg2Copy, arg3})
	fake.evalShaMutex.Unlock()
	if fake.EvalShaStub != nil {
		return fake.EvalShaStub(arg1, arg2, arg3...)
	}
	return fake.evalShaReturns.result1
}

//EvalShaCallCount ...
func (fake *ScriptFake) EvalShaCallCount() int {
	fake.evalShaMutex.RLock()
	defer fake.evalShaMutex.RUnlock()
	return len(fake.evalShaArgsForCall)
}

//EvalShaArgsForCall ...
func (fake *ScriptFake) EvalShaArgsForCall(i int) (Scripter, []string, []interface{}) {
	fake.evalShaMutex.RLock()
	defer fake.evalShaMutex.RUnlock()
	return fake.evalShaArgsForCall[i].arg1, fake.evalShaArgsForCall[i].arg2, fake.evalShaArgsForCall[i].arg3
}

//EvalShaReturns ...
func (fake *ScriptFake) EvalShaReturns(result1 *redis.Cmd) {
	fake.EvalShaStub = nil
	fake.evalShaReturns = struct {
		result1 *redis.Cmd
	}{result1}
}

//Exists ...
func (fake *ScriptFake) Exists(arg1 Scripter) BoolSliceCmd {
	fake.existsMutex.Lock()
	fake.existsArgsForCall = append(fake.existsArgsForCall, struct {
		arg1 Scripter
	}{arg1})
	fake.recordInvocation("Exists", []interface{}{arg1})
	fake.existsMutex.Unlock()
	if fake.ExistsStub != nil {
		return fake.ExistsStub(arg1)
	}
	return fake.existsReturns.result1
}

//ExistsCallCount ...
func (fake *ScriptFake) ExistsCallCount() int {
	fake.existsMutex.RLock()
	defer fake.existsMutex.RUnlock()
	return len(fake.existsArgsForCall)
}

//ExistsArgsForCall ...
func (fake *ScriptFake) ExistsArgsForCall(i int) Scripter {
	fake.existsMutex.RLock()
	defer fake.existsMutex.RUnlock()
	return fake.existsArgsForCall[i].arg1
}

//ExistsReturns ...
func (fake *ScriptFake) ExistsReturns(result1 BoolSliceCmd) {
	fake.ExistsStub = nil
	fake.existsReturns = struct {
		result1 BoolSliceCmd
	}{result1}
}

//Load ...
func (fake *ScriptFake) Load(arg1 Scripter) StringCmd {
	fake.loadMutex.Lock()
	fake.loadArgsForCall = append(fake.loadArgsForCall, struct {
		arg1 Scripter
	}{arg1})
	fake.recordInvocation("Load", []interface{}{arg1})
	fake.loadMutex.Unlock()
	if fake.LoadStub != nil {
		return fake.LoadStub(arg1)
	}
	return fake.loadReturns.result1
}

//LoadCallCount ...
func (fake *ScriptFake) LoadCallCount() int {
	fake.loadMutex.RLock()
	defer fake.loadMutex.RUnlock()
	return len(fake.loadArgsForCall)
}

//LoadArgsForCall ...
func (fake *ScriptFake) LoadArgsForCall(i int) Scripter {
	fake.loadMutex.RLock()
	defer fake.loadMutex.RUnlock()
	return fake.loadArgsForCall[i].arg1
}

//LoadReturns ...
func (fake *ScriptFake) LoadReturns(result1 StringCmd) {
	fake.LoadStub = nil
	fake.loadReturns = struct {
		result1 StringCmd
	}{result1}
}

//Run ...
func (fake *ScriptFake) Run(arg1 Scripter, arg2 []string, arg3 ...interface{}) *redis.Cmd {
	var arg2Copy []string
	if arg2 != nil {
		arg2Copy = make([]string, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.runMutex.Lock()
	fake.runArgsForCall = append(fake.runArgsForCall, struct {
		arg1 Scripter
		arg2 []string
		arg3 []interface{}
	}{arg1, arg2Copy, arg3})
	fake.recordInvocation("Run", []interface{}{arg1, arg2Copy, arg3})
	fake.runMutex.Unlock()
	if fake.RunStub != nil {
		return fake.RunStub(arg1, arg2, arg3...)
	}
	return fake.runReturns.result1
}

//RunCallCount ...
func (fake *ScriptFake) RunCallCount() int {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return len(fake.runArgsForCall)
}

//RunArgsForCall ...
func (fake *ScriptFake) RunArgsForCall(i int) (Scripter, []string, []interface{}) {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return fake.runArgsForCall[i].arg1, fake.runArgsForCall[i].arg2, fake.runArgsForCall[i].arg3
}

//RunReturns ...
func (fake *ScriptFake) RunReturns(result1 *redis.Cmd) {
	fake.RunStub = nil
	fake.runReturns = struct {
		result1 *redis.Cmd
	}{result1}
}

//Invocations ...
func (fake *ScriptFake) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.evalMutex.RLock()
	defer fake.evalMutex.RUnlock()
	fake.evalShaMutex.RLock()
	defer fake.evalShaMutex.RUnlock()
	fake.existsMutex.RLock()
	defer fake.existsMutex.RUnlock()
	fake.loadMutex.RLock()
	defer fake.loadMutex.RUnlock()
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return fake.invocations
}

func (fake *ScriptFake) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ Script = new(ScriptFake)
