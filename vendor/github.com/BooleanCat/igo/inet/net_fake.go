// This file was generated by counterfeiter
// counterfeiter -o inet/net_fake.go --fake-name Fake inet/net.go Net

package inet

import (
	"net"
	"sync"
)

//Fake ...
type Fake struct {
	ListenStub        func(protocol, laddr string) (net.Listener, error)
	listenMutex       sync.RWMutex
	listenArgsForCall []struct {
		protocol string
		laddr    string
	}
	listenReturns struct {
		result1 net.Listener
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

//NewFake is the preferred way to initialise a Fake
func NewFake() *Fake {
	return new(Fake)
}

//Listen ...
func (fake *Fake) Listen(protocol string, laddr string) (net.Listener, error) {
	fake.listenMutex.Lock()
	fake.listenArgsForCall = append(fake.listenArgsForCall, struct {
		protocol string
		laddr    string
	}{protocol, laddr})
	fake.recordInvocation("Listen", []interface{}{protocol, laddr})
	fake.listenMutex.Unlock()
	if fake.ListenStub != nil {
		return fake.ListenStub(protocol, laddr)
	}
	return fake.listenReturns.result1, fake.listenReturns.result2
}

//ListenCallCount ...
func (fake *Fake) ListenCallCount() int {
	fake.listenMutex.RLock()
	defer fake.listenMutex.RUnlock()
	return len(fake.listenArgsForCall)
}

//ListenArgsForCall ...
func (fake *Fake) ListenArgsForCall(i int) (string, string) {
	fake.listenMutex.RLock()
	defer fake.listenMutex.RUnlock()
	return fake.listenArgsForCall[i].protocol, fake.listenArgsForCall[i].laddr
}

//ListenReturns ...
func (fake *Fake) ListenReturns(result1 net.Listener, result2 error) {
	fake.ListenStub = nil
	fake.listenReturns = struct {
		result1 net.Listener
		result2 error
	}{result1, result2}
}

//Invocations ...
func (fake *Fake) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.listenMutex.RLock()
	defer fake.listenMutex.RUnlock()
	return fake.invocations
}

func (fake *Fake) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ Net = new(Fake)
