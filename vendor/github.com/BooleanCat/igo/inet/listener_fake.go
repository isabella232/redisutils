// This file was generated by counterfeiter

package inet

import (
	"net"
	"sync"
)

//ListenerFake ...
type ListenerFake struct {
	AcceptStub        func() (net.Conn, error)
	acceptMutex       sync.RWMutex
	acceptArgsForCall []struct{}
	acceptReturns     struct {
		result1 net.Conn
		result2 error
	}
	CloseStub        func() error
	closeMutex       sync.RWMutex
	closeArgsForCall []struct{}
	closeReturns     struct {
		result1 error
	}
	AddrStub        func() net.Addr
	addrMutex       sync.RWMutex
	addrArgsForCall []struct{}
	addrReturns     struct {
		result1 net.Addr
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

//NewListenerFake is the preferred way to initialise a ListenerFake
func NewListenerFake() *ListenerFake {
	return new(ListenerFake)
}

//Accept ...
func (fake *ListenerFake) Accept() (net.Conn, error) {
	fake.acceptMutex.Lock()
	fake.acceptArgsForCall = append(fake.acceptArgsForCall, struct{}{})
	fake.recordInvocation("Accept", []interface{}{})
	fake.acceptMutex.Unlock()
	if fake.AcceptStub != nil {
		return fake.AcceptStub()
	}
	return fake.acceptReturns.result1, fake.acceptReturns.result2
}

//AcceptCallCount ...
func (fake *ListenerFake) AcceptCallCount() int {
	fake.acceptMutex.RLock()
	defer fake.acceptMutex.RUnlock()
	return len(fake.acceptArgsForCall)
}

//AcceptReturns ...
func (fake *ListenerFake) AcceptReturns(result1 net.Conn, result2 error) {
	fake.AcceptStub = nil
	fake.acceptReturns = struct {
		result1 net.Conn
		result2 error
	}{result1, result2}
}

//Close ...
func (fake *ListenerFake) Close() error {
	fake.closeMutex.Lock()
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct{}{})
	fake.recordInvocation("Close", []interface{}{})
	fake.closeMutex.Unlock()
	if fake.CloseStub != nil {
		return fake.CloseStub()
	}
	return fake.closeReturns.result1
}

//CloseCallCount ...
func (fake *ListenerFake) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

//CloseReturns ...
func (fake *ListenerFake) CloseReturns(result1 error) {
	fake.CloseStub = nil
	fake.closeReturns = struct {
		result1 error
	}{result1}
}

//Addr ...
func (fake *ListenerFake) Addr() net.Addr {
	fake.addrMutex.Lock()
	fake.addrArgsForCall = append(fake.addrArgsForCall, struct{}{})
	fake.recordInvocation("Addr", []interface{}{})
	fake.addrMutex.Unlock()
	if fake.AddrStub != nil {
		return fake.AddrStub()
	}
	return fake.addrReturns.result1
}

//AddrCallCount ...
func (fake *ListenerFake) AddrCallCount() int {
	fake.addrMutex.RLock()
	defer fake.addrMutex.RUnlock()
	return len(fake.addrArgsForCall)
}

//AddrReturns ...
func (fake *ListenerFake) AddrReturns(result1 net.Addr) {
	fake.AddrStub = nil
	fake.addrReturns = struct {
		result1 net.Addr
	}{result1}
}

//Invocations ...
func (fake *ListenerFake) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.acceptMutex.RLock()
	defer fake.acceptMutex.RUnlock()
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	fake.addrMutex.RLock()
	defer fake.addrMutex.RUnlock()
	return fake.invocations
}

func (fake *ListenerFake) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ net.Listener = new(ListenerFake)
